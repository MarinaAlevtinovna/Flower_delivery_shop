import asyncio
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, InputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from .bot_config import BOT_TOKEN, API_TOKEN, ADMIN_ID
import logging

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    filename="bot.log",  # –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Ñ–∞–π–ª
    filemode="a",  # –î–æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤ —Ñ–∞–π–ª (–Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç)
)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
console = logging.StreamHandler()
console.setLevel(logging.ERROR)
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
console.setFormatter(formatter)
logging.getLogger("").addHandler(console)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

headers = {
    "Authorization": f"Token {API_TOKEN}"
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõç –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")]
    ],
    resize_keyboard=True
)

# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞
class OrderState(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_address = State()
    confirming = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message):
    telegram_id = message.from_user.id
    username = message.from_user.username or f"user_{telegram_id}"

    user_response = requests.get(
        f"http://127.0.0.1:8000/api/get_user/?telegram_id={telegram_id}",
        headers=headers
    )

    if user_response.status_code != 200:
        create_user_data = {"username": username, "telegram_id": telegram_id}
        requests.post("http://127.0.0.1:8000/api/users/", json=create_user_data, headers=headers)

    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flower Delivery Bot!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ API
import os
from flower_delivery.settings import MEDIA_ROOT, SITE_URL, MEDIA_URL

@dp.message(F.text == "\U0001F6CD –ö–∞—Ç–∞–ª–æ–≥")
async def catalog(message: types.Message):
    response = requests.get(f"{SITE_URL}/api/catalog/", headers=headers)

    if response.status_code == 200:
        products = response.json()

        for product in products:
            image_path = product.get("image", "").strip()
            button = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üõç –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{product['id']}")]
            ])

            if image_path:
                # ‚úÖ –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π –¥—É–±–ª–∏–∫–∞—Ç `/media/`
                if image_path.startswith(MEDIA_URL):
                    image_path = image_path[len(MEDIA_URL):]

                # üîÑ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –¥–ª—è Windows/Linux)
                full_path = os.path.normpath(os.path.join(MEDIA_ROOT, image_path.lstrip("/")))

                logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å: {full_path}")

                if os.path.exists(full_path):
                    try:
                        photo = FSInputFile(full_path)  # <-- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                        logging.info(f"üì∏ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ: {full_path}")
                        await message.answer_photo(photo=photo, caption=f"{product['name']}\nüí∞ {product['price']} —Ä—É–±.", reply_markup=button)
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                        await message.answer_photo(photo="https://via.placeholder.com/300", caption=f"{product['name']}\nüí∞ {product['price']} —Ä—É–±.", reply_markup=button)
                else:
                    logging.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {full_path}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É.")
                    await message.answer_photo(photo="https://via.placeholder.com/300", caption=f"{product['name']}\nüí∞ {product['price']} —Ä—É–±.", reply_markup=button)

    else:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞! –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}.")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞! –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑–∞—Ç—å"
@dp.callback_query(lambda c: c.data.startswith("order_"))
async def order_start(callback: types.CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[1])
    await state.update_data(product_id=product_id, telegram_id=callback.from_user.id)
    await callback.message.answer("üìõ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(OrderState.waiting_for_name)
    await callback.answer()

@dp.message(OrderState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –µ–≥–æ –¥–ª–∏–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
    if not name.isalpha() or len(name) < 2 or len(name) > 50:
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–Ω–æ–≤–æ:")
        return

    await state.update_data(name=name)
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    await state.set_state(OrderState.waiting_for_phone)

@dp.message(OrderState.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip().replace(" ", "")  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä –∏ –∏–º–µ–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏–Ω—É
    if not phone.isdigit():
        await message.answer("‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞–Ω–æ–≤–æ:")
        return

    if not (5 <= len(phone) <= 15):
        await message.answer("‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 5 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞–Ω–æ–≤–æ:")
        return

    await state.update_data(phone=phone)
    await message.answer("üè† –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤):")
    await state.set_state(OrderState.waiting_for_address)

@dp.message(OrderState.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    address = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å –Ω–µ –ø—É—Å—Ç–æ–π –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤
    if len(address) < 5:
        await message.answer("‚ùå –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–∞–Ω–æ–≤–æ:")
        return

    await state.update_data(address=address)

    data = await state.get_data()
    product_id = data["product_id"]
    name = data["name"]
    phone = data["phone"]
    address = data["address"]

    confirmation_text = (
        f"üì¶ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n"
        f"üõí –¢–æ–≤–∞—Ä ID: {product_id}\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üè† –ê–¥—Ä–µ—Å: {address}\n\n"
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑."
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")]
        ]
    )

    await message.answer(confirmation_text, reply_markup=keyboard)
    await state.set_state(OrderState.confirming)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
@dp.callback_query(lambda c: c.data == "confirm_order")
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    user_response = requests.get(
        f"http://127.0.0.1:8000/api/get_user/?telegram_id={callback.from_user.id}",
        headers=headers
    )

    if user_response.status_code != 200:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ!")
        await state.clear()
        return

    user_data = user_response.json()
    django_user_id = user_data["id"]

    order_data = {
        "user": django_user_id,
        "products": [data["product_id"]],
        "status": "new",
        "name": data["name"],
        "phone": data["phone"],
        "address": data["address"],
        "telegram_id": callback.from_user.id  # –î–æ–±–∞–≤–ª—è–µ–º telegram_id –≤ –∑–∞–∫–∞–∑
    }

    response = requests.post("http://127.0.0.1:8000/api/orders/", json=order_data, headers=headers)

    if response.status_code == 201:
        order_info = response.json()
        order_id = order_info["id"]

        admin_message = (
            f"üì¢ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
            f"üÜî –ó–∞–∫–∞–∑ ‚Ññ{order_id}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {django_user_id}\n"
            f"üì¶ –¢–æ–≤–∞—Ä ID: {data['product_id']}\n"
            f"üìõ –ò–º—è: {data['name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"üè† –ê–¥—Ä–µ—Å: {data['address']}\n"
            f"üÜî Telegram ID: {callback.from_user.id}"
        )

        try:
            await bot.send_message(chat_id=ADMIN_ID, text=admin_message)
            logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {ADMIN_ID} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

        await callback.message.answer(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! üéâ")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!")

    await state.clear()
    await callback.answer()


@dp.message(F.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders(message: types.Message):
    user_telegram_id = message.from_user.id

    user_response = requests.get(
        f"http://127.0.0.1:8000/api/get_user/?telegram_id={user_telegram_id}",
        headers={"Authorization": f"Token {API_TOKEN}"}
    )

    if user_response.status_code != 200:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ!")
        return

    user_data = user_response.json()
    django_user_id = user_data["id"]

    response = requests.get(
        f"http://127.0.0.1:8000/api/orders/?telegram_id={user_telegram_id}",
        headers={"Authorization": f"Token {API_TOKEN}"}
    )

    if response.status_code == 200:
        orders = response.json()
        if not orders:
            await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        else:
            text = "üì¶ *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n\n"
            for order in orders:
                product_id = order["products"][0]
                product_response = requests.get(
                    f"http://127.0.0.1:8000/api/products/{product_id}/",
                    headers={"Authorization": f"Token {API_TOKEN}"}
                )

                if product_response.status_code == 200:
                    product_name = product_response.json().get("name", f"–¢–æ–≤–∞—Ä ID {product_id}")
                else:
                    product_name = f"–¢–æ–≤–∞—Ä ID {product_id}"

                status_mapping = {
                    "new": "üü° –ù–æ–≤—ã–π",
                    "processing": "üü† –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                    "completed": "üü¢ –ó–∞–≤–µ—Ä—à—ë–Ω"
                }
                status = status_mapping.get(order["status"], "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")

                text += (
                    f"üõí *–¢–æ–≤–∞—Ä:* {product_name}\n"
                    f"üìÜ *–î–∞—Ç–∞:* {order.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10]}\n"
                    f"üîò *–°—Ç–∞—Ç—É—Å:* {status}\n"
                    f"----------------------\n"
                )

            await message.answer(text, parse_mode="Markdown")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤! –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É 401.")


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

def start_bot():
    asyncio.run(main())