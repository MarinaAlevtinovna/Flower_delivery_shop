import logging
import asyncio
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from .bot_config import BOT_TOKEN, API_TOKEN, ADMIN_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

headers = {
    "Authorization": f"Token {API_TOKEN}"
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõç –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")]
    ],
    resize_keyboard=True
)

# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞
class OrderState(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_address = State()
    confirming = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flower Delivery Bot!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ API
@dp.message(F.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def catalog(message: types.Message):
    response = requests.get("http://127.0.0.1:8000/api/products/", headers=headers)

    if response.status_code == 200:
        products = response.json()
        if not products:
            await message.answer("‚ùå –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç!")
        else:
            for product in products:
                text = f"üå∏ *{product['name']}*\nüí∞ –¶–µ–Ω–∞: {product['price']} ‚ÇΩ"
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üõç –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{product['id']}")]
                    ]
                )
                await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑–∞—Ç—å"
@dp.callback_query(lambda c: c.data.startswith("order_"))
async def order_start(callback: types.CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[1])
    await state.update_data(product_id=product_id)
    await callback.message.answer("üìõ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(OrderState.waiting_for_name)
    await callback.answer()

@dp.message(OrderState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(OrderState.waiting_for_phone)

@dp.message(OrderState.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("üè† –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:")
    await state.set_state(OrderState.waiting_for_address)

@dp.message(OrderState.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)

    data = await state.get_data()
    confirmation_text = (
        f"üì¶ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n"
        f"üõí –¢–æ–≤–∞—Ä ID: {data['product_id']}\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üè† –ê–¥—Ä–µ—Å: {data['address']}\n\n"
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑."
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")]
        ]
    )

    await message.answer(confirmation_text, reply_markup=keyboard)
    await state.set_state(OrderState.confirming)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
@dp.callback_query(lambda c: c.data == "confirm_order")
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    user_response = requests.get(
        f"http://127.0.0.1:8000/api/get_user/?telegram_id={callback.from_user.id}",
        headers=headers
    )

    if user_response.status_code != 200:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ!")
        await state.clear()
        return

    user_data = user_response.json()
    django_user_id = user_data["id"]

    order_data = {
        "user": django_user_id,
        "products": [data["product_id"]],
        "status": "new",
        "name": data["name"],
        "phone": data["phone"],
        "address": data["address"]
    }

    response = requests.post("http://127.0.0.1:8000/api/orders/", json=order_data, headers=headers)

    if response.status_code == 201:
        order_info = response.json()
        order_id = order_info["id"]

        admin_message = (
            f"üì¢ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
            f"üÜî –ó–∞–∫–∞–∑ ‚Ññ{order_id}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {django_user_id}\n"
            f"üì¶ –¢–æ–≤–∞—Ä ID: {data['product_id']}\n"
            f"üìõ –ò–º—è: {data['name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"üè† –ê–¥—Ä–µ—Å: {data['address']}"
        )

        try:
            await bot.send_message(chat_id=ADMIN_ID, text=admin_message)
            logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {ADMIN_ID} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

        await callback.message.answer(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! üéâ")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!")

    await state.clear()
    await callback.answer()

@dp.message(F.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders(message: types.Message):
    user_response = requests.get(
        f"http://127.0.0.1:8000/api/get_user/?telegram_id={message.from_user.id}",
        headers=headers
    )

    if user_response.status_code != 200:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ!")
        return

    user_data = user_response.json()
    django_user_id = user_data["id"]

    response = requests.get(f"http://127.0.0.1:8000/api/orders/?user={django_user_id}", headers=headers)

    if response.status_code == 200:
        orders = response.json()
        if not orders:
            await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        else:
            text = "\n".join([f"üõí –ó–∞–∫–∞–∑ #{o['id']}: {o['status']}" for o in orders])
            await message.answer(f"üì¶ *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n{text}", parse_mode="Markdown")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤!")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

def start_bot():
    asyncio.run(main())
